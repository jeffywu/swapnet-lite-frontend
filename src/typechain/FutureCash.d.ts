/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {Contract, ContractTransaction, EventFilter, Signer} from "ethers";
import {Listener, Provider} from "ethers/providers";
import {Arrayish, BigNumber, BigNumberish, Interface} from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface FutureCashInterface extends Interface {
  functions: {
    CASH_PAYER: TypedFunctionDescription<{encode([]: []): string}>;

    CASH_RECEIVER: TypedFunctionDescription<{encode([]: []): string}>;

    DECIMALS: TypedFunctionDescription<{encode([]: []): string}>;

    G_COLLATERALIZATION_RATIO: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    G_DAI_CONTRACT: TypedFunctionDescription<{encode([]: []): string}>;

    G_LIQUIDATION_BONUS: TypedFunctionDescription<{encode([]: []): string}>;

    G_LIQUIDITY_FEE: TypedFunctionDescription<{encode([]: []): string}>;

    G_MAX_DAI_BALANCE: TypedFunctionDescription<{encode([]: []): string}>;

    G_MAX_ETH_BALANCE: TypedFunctionDescription<{encode([]: []): string}>;

    G_NUM_PERIODS: TypedFunctionDescription<{encode([]: []): string}>;

    G_PERIOD_SIZE: TypedFunctionDescription<{encode([]: []): string}>;

    G_UNISWAP_DAI_CONTRACT: TypedFunctionDescription<{encode([]: []): string}>;

    INSTRUMENT_PRECISION: TypedFunctionDescription<{encode([]: []): string}>;

    LIQUIDITY_TOKEN: TypedFunctionDescription<{encode([]: []): string}>;

    accountTrades: TypedFunctionDescription<{
      encode([,]: [string, BigNumberish]): string;
    }>;

    addLiquidity: TypedFunctionDescription<{
      encode([maturity, minFutureCash, maxDai]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    daiBalances: TypedFunctionDescription<{encode([]: [string]): string}>;

    daiCashBalances: TypedFunctionDescription<{encode([]: [string]): string}>;

    depositDai: TypedFunctionDescription<{
      encode([amount]: [BigNumberish]): string;
    }>;

    depositEth: TypedFunctionDescription<{encode([]: []): string}>;

    ethBalances: TypedFunctionDescription<{encode([]: [string]): string}>;

    freeCollateral: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    getAccountTrades: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    getActiveMaturities: TypedFunctionDescription<{encode([]: []): string}>;

    getDaiPrice: TypedFunctionDescription<{
      encode([maturity, amount]: [BigNumberish, BigNumberish]): string;
    }>;

    getFutureCashPrice: TypedFunctionDescription<{
      encode([maturity, amount]: [BigNumberish, BigNumberish]): string;
    }>;

    getMarketRates: TypedFunctionDescription<{encode([]: []): string}>;

    getRate: TypedFunctionDescription<{
      encode([maturity]: [BigNumberish]): string;
    }>;

    getTokenValue: TypedFunctionDescription<{
      encode([maturity, amount]: [BigNumberish, BigNumberish]): string;
    }>;

    isOwner: TypedFunctionDescription<{encode([]: []): string}>;

    liquidate: TypedFunctionDescription<{encode([account]: [string]): string}>;

    markets: TypedFunctionDescription<{encode([]: [BigNumberish]): string}>;

    owner: TypedFunctionDescription<{encode([]: []): string}>;

    removeLiquidity: TypedFunctionDescription<{
      encode([maturity, amount, index]: [
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    renounceOwnership: TypedFunctionDescription<{encode([]: []): string}>;

    setCollateralCaps: TypedFunctionDescription<{
      encode([eth, dai]: [BigNumberish, BigNumberish]): string;
    }>;

    setCollateralRatio: TypedFunctionDescription<{
      encode([ratio]: [BigNumberish]): string;
    }>;

    setFee: TypedFunctionDescription<{
      encode([liquidityFee]: [BigNumberish]): string;
    }>;

    setNumPeriods: TypedFunctionDescription<{
      encode([numPeriods]: [BigNumberish]): string;
    }>;

    settle: TypedFunctionDescription<{encode([account]: [string]): string}>;

    settleBatch: TypedFunctionDescription<{
      encode([accounts]: [string[]]): string;
    }>;

    settleCash: TypedFunctionDescription<{
      encode([counterparty, value]: [string, BigNumberish]): string;
    }>;

    takeDai: TypedFunctionDescription<{
      encode([maturity, amount]: [BigNumberish, BigNumberish]): string;
    }>;

    takeFutureCash: TypedFunctionDescription<{
      encode([maturity, amount]: [BigNumberish, BigNumberish]): string;
    }>;

    totalDaiBalance: TypedFunctionDescription<{encode([]: []): string}>;

    totalEthBalance: TypedFunctionDescription<{encode([]: []): string}>;

    transferFutureCash: TypedFunctionDescription<{
      encode([to, index, amount]: [string, BigNumberish, BigNumberish]): string;
    }>;

    transferOwnership: TypedFunctionDescription<{
      encode([newOwner]: [string]): string;
    }>;

    withdrawDai: TypedFunctionDescription<{
      encode([amount]: [BigNumberish]): string;
    }>;

    withdrawEth: TypedFunctionDescription<{
      encode([amount]: [BigNumberish]): string;
    }>;
  };

  events: {
    AddLiquidity: TypedEventDescription<{
      encodeTopics([account, maturity, tokens, futureCash, daiAmount]: [
        string | null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    CreateAsset: TypedEventDescription<{
      encodeTopics([account, tradeType, maturity, futureCash, daiAmount]: [
        string | null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    OwnershipTransferred: TypedEventDescription<{
      encodeTopics([previousOwner, newOwner]: [
        string | null,
        string | null
      ]): string[];
    }>;

    RemoveLiquidity: TypedEventDescription<{
      encodeTopics([account, maturity, tokens, futureCash, daiAmount]: [
        string | null,
        null,
        null,
        null,
        null
      ]): string[];
    }>;

    SettleCash: TypedEventDescription<{
      encodeTopics([from, to, amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    TransferAsset: TypedEventDescription<{
      encodeTopics([from, to, tradeType, maturity, notional]: [
        string | null,
        string | null,
        null,
        null,
        null
      ]): string[];
    }>;

    TransferDai: TypedEventDescription<{
      encodeTopics([account, amount, isDeposit]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    TransferEth: TypedEventDescription<{
      encodeTopics([account, amount, isDeposit]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    UpdateCashBalance: TypedEventDescription<{
      encodeTopics([account, amount]: [string | null, null]): string[];
    }>;
  };
}

export class FutureCash extends Contract {
  connect(signerOrProvider: Signer | Provider | string): FutureCash;
  attach(addressOrName: string): FutureCash;
  deployed(): Promise<FutureCash>;

  on(event: EventFilter | string, listener: Listener): FutureCash;
  once(event: EventFilter | string, listener: Listener): FutureCash;
  addListener(eventName: EventFilter | string, listener: Listener): FutureCash;
  removeAllListeners(eventName: EventFilter | string): FutureCash;
  removeListener(eventName: any, listener: Listener): FutureCash;

  interface: FutureCashInterface;

  functions: {
    CASH_PAYER(): Promise<number>;

    CASH_RECEIVER(): Promise<number>;

    DECIMALS(): Promise<BigNumber>;

    G_COLLATERALIZATION_RATIO(): Promise<BigNumber>;

    G_DAI_CONTRACT(): Promise<string>;

    G_LIQUIDATION_BONUS(): Promise<BigNumber>;

    G_LIQUIDITY_FEE(): Promise<BigNumber>;

    G_MAX_DAI_BALANCE(): Promise<BigNumber>;

    G_MAX_ETH_BALANCE(): Promise<BigNumber>;

    G_NUM_PERIODS(): Promise<number>;

    G_PERIOD_SIZE(): Promise<number>;

    G_UNISWAP_DAI_CONTRACT(): Promise<string>;

    INSTRUMENT_PRECISION(): Promise<number>;

    LIQUIDITY_TOKEN(): Promise<number>;

    accountTrades(
      arg0: string,
      arg1: BigNumberish
    ): Promise<{
      tradeType: number;
      maturity: number;
      notional: BigNumber;
      0: number;
      1: number;
      2: BigNumber;
    }>;

    addLiquidity(
      maturity: BigNumberish,
      minFutureCash: BigNumberish,
      maxDai: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    daiBalances(arg0: string): Promise<BigNumber>;

    daiCashBalances(arg0: string): Promise<BigNumber>;

    depositDai(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    depositEth(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    ethBalances(arg0: string): Promise<BigNumber>;

    freeCollateral(account: string): Promise<BigNumber>;

    getAccountTrades(
      account: string
    ): Promise<{tradeType: number; maturity: number; notional: BigNumber}[]>;

    getActiveMaturities(): Promise<number[]>;

    getDaiPrice(
      maturity: BigNumberish,
      amount: BigNumberish
    ): Promise<BigNumber>;

    getFutureCashPrice(
      maturity: BigNumberish,
      amount: BigNumberish
    ): Promise<BigNumber>;

    getMarketRates(): Promise<number[]>;

    getRate(
      maturity: BigNumberish
    ): Promise<{
      0: number;
      1: boolean;
    }>;

    getTokenValue(
      maturity: BigNumberish,
      amount: BigNumberish
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    isOwner(): Promise<boolean>;

    liquidate(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    markets(
      arg0: BigNumberish
    ): Promise<{
      totalFutureCash: BigNumber;
      totalLiquidity: BigNumber;
      totalCollateral: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    owner(): Promise<string>;

    removeLiquidity(
      maturity: BigNumberish,
      amount: BigNumberish,
      index: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setCollateralCaps(
      eth: BigNumberish,
      dai: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setCollateralRatio(
      ratio: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setFee(
      liquidityFee: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setNumPeriods(
      numPeriods: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    settle(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    settleBatch(
      accounts: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    settleCash(
      counterparty: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    takeDai(
      maturity: BigNumberish,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    takeFutureCash(
      maturity: BigNumberish,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    totalDaiBalance(): Promise<BigNumber>;

    totalEthBalance(): Promise<BigNumber>;

    transferFutureCash(
      to: string,
      index: BigNumberish,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawDai(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    withdrawEth(
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  CASH_PAYER(): Promise<number>;

  CASH_RECEIVER(): Promise<number>;

  DECIMALS(): Promise<BigNumber>;

  G_COLLATERALIZATION_RATIO(): Promise<BigNumber>;

  G_DAI_CONTRACT(): Promise<string>;

  G_LIQUIDATION_BONUS(): Promise<BigNumber>;

  G_LIQUIDITY_FEE(): Promise<BigNumber>;

  G_MAX_DAI_BALANCE(): Promise<BigNumber>;

  G_MAX_ETH_BALANCE(): Promise<BigNumber>;

  G_NUM_PERIODS(): Promise<number>;

  G_PERIOD_SIZE(): Promise<number>;

  G_UNISWAP_DAI_CONTRACT(): Promise<string>;

  INSTRUMENT_PRECISION(): Promise<number>;

  LIQUIDITY_TOKEN(): Promise<number>;

  accountTrades(
    arg0: string,
    arg1: BigNumberish
  ): Promise<{
    tradeType: number;
    maturity: number;
    notional: BigNumber;
    0: number;
    1: number;
    2: BigNumber;
  }>;

  addLiquidity(
    maturity: BigNumberish,
    minFutureCash: BigNumberish,
    maxDai: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  daiBalances(arg0: string): Promise<BigNumber>;

  daiCashBalances(arg0: string): Promise<BigNumber>;

  depositDai(
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  depositEth(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  ethBalances(arg0: string): Promise<BigNumber>;

  freeCollateral(account: string): Promise<BigNumber>;

  getAccountTrades(
    account: string
  ): Promise<{tradeType: number; maturity: number; notional: BigNumber}[]>;

  getActiveMaturities(): Promise<number[]>;

  getDaiPrice(maturity: BigNumberish, amount: BigNumberish): Promise<BigNumber>;

  getFutureCashPrice(
    maturity: BigNumberish,
    amount: BigNumberish
  ): Promise<BigNumber>;

  getMarketRates(): Promise<number[]>;

  getRate(
    maturity: BigNumberish
  ): Promise<{
    0: number;
    1: boolean;
  }>;

  getTokenValue(
    maturity: BigNumberish,
    amount: BigNumberish
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  isOwner(): Promise<boolean>;

  liquidate(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  markets(
    arg0: BigNumberish
  ): Promise<{
    totalFutureCash: BigNumber;
    totalLiquidity: BigNumber;
    totalCollateral: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  owner(): Promise<string>;

  removeLiquidity(
    maturity: BigNumberish,
    amount: BigNumberish,
    index: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setCollateralCaps(
    eth: BigNumberish,
    dai: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setCollateralRatio(
    ratio: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setFee(
    liquidityFee: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setNumPeriods(
    numPeriods: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  settle(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  settleBatch(
    accounts: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  settleCash(
    counterparty: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  takeDai(
    maturity: BigNumberish,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  takeFutureCash(
    maturity: BigNumberish,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  totalDaiBalance(): Promise<BigNumber>;

  totalEthBalance(): Promise<BigNumber>;

  transferFutureCash(
    to: string,
    index: BigNumberish,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawDai(
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  withdrawEth(
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    AddLiquidity(
      account: string | null,
      maturity: null,
      tokens: null,
      futureCash: null,
      daiAmount: null
    ): EventFilter;

    CreateAsset(
      account: string | null,
      tradeType: null,
      maturity: null,
      futureCash: null,
      daiAmount: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RemoveLiquidity(
      account: string | null,
      maturity: null,
      tokens: null,
      futureCash: null,
      daiAmount: null
    ): EventFilter;

    SettleCash(
      from: string | null,
      to: string | null,
      amount: null
    ): EventFilter;

    TransferAsset(
      from: string | null,
      to: string | null,
      tradeType: null,
      maturity: null,
      notional: null
    ): EventFilter;

    TransferDai(
      account: string | null,
      amount: null,
      isDeposit: null
    ): EventFilter;

    TransferEth(
      account: string | null,
      amount: null,
      isDeposit: null
    ): EventFilter;

    UpdateCashBalance(account: string | null, amount: null): EventFilter;
  };

  estimate: {
    CASH_PAYER(): Promise<BigNumber>;

    CASH_RECEIVER(): Promise<BigNumber>;

    DECIMALS(): Promise<BigNumber>;

    G_COLLATERALIZATION_RATIO(): Promise<BigNumber>;

    G_DAI_CONTRACT(): Promise<BigNumber>;

    G_LIQUIDATION_BONUS(): Promise<BigNumber>;

    G_LIQUIDITY_FEE(): Promise<BigNumber>;

    G_MAX_DAI_BALANCE(): Promise<BigNumber>;

    G_MAX_ETH_BALANCE(): Promise<BigNumber>;

    G_NUM_PERIODS(): Promise<BigNumber>;

    G_PERIOD_SIZE(): Promise<BigNumber>;

    G_UNISWAP_DAI_CONTRACT(): Promise<BigNumber>;

    INSTRUMENT_PRECISION(): Promise<BigNumber>;

    LIQUIDITY_TOKEN(): Promise<BigNumber>;

    accountTrades(arg0: string, arg1: BigNumberish): Promise<BigNumber>;

    addLiquidity(
      maturity: BigNumberish,
      minFutureCash: BigNumberish,
      maxDai: BigNumberish
    ): Promise<BigNumber>;

    daiBalances(arg0: string): Promise<BigNumber>;

    daiCashBalances(arg0: string): Promise<BigNumber>;

    depositDai(amount: BigNumberish): Promise<BigNumber>;

    depositEth(): Promise<BigNumber>;

    ethBalances(arg0: string): Promise<BigNumber>;

    freeCollateral(account: string): Promise<BigNumber>;

    getAccountTrades(account: string): Promise<BigNumber>;

    getActiveMaturities(): Promise<BigNumber>;

    getDaiPrice(
      maturity: BigNumberish,
      amount: BigNumberish
    ): Promise<BigNumber>;

    getFutureCashPrice(
      maturity: BigNumberish,
      amount: BigNumberish
    ): Promise<BigNumber>;

    getMarketRates(): Promise<BigNumber>;

    getRate(maturity: BigNumberish): Promise<BigNumber>;

    getTokenValue(
      maturity: BigNumberish,
      amount: BigNumberish
    ): Promise<BigNumber>;

    isOwner(): Promise<BigNumber>;

    liquidate(account: string): Promise<BigNumber>;

    markets(arg0: BigNumberish): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    removeLiquidity(
      maturity: BigNumberish,
      amount: BigNumberish,
      index: BigNumberish
    ): Promise<BigNumber>;

    renounceOwnership(): Promise<BigNumber>;

    setCollateralCaps(eth: BigNumberish, dai: BigNumberish): Promise<BigNumber>;

    setCollateralRatio(ratio: BigNumberish): Promise<BigNumber>;

    setFee(liquidityFee: BigNumberish): Promise<BigNumber>;

    setNumPeriods(numPeriods: BigNumberish): Promise<BigNumber>;

    settle(account: string): Promise<BigNumber>;

    settleBatch(accounts: string[]): Promise<BigNumber>;

    settleCash(counterparty: string, value: BigNumberish): Promise<BigNumber>;

    takeDai(maturity: BigNumberish, amount: BigNumberish): Promise<BigNumber>;

    takeFutureCash(
      maturity: BigNumberish,
      amount: BigNumberish
    ): Promise<BigNumber>;

    totalDaiBalance(): Promise<BigNumber>;

    totalEthBalance(): Promise<BigNumber>;

    transferFutureCash(
      to: string,
      index: BigNumberish,
      amount: BigNumberish
    ): Promise<BigNumber>;

    transferOwnership(newOwner: string): Promise<BigNumber>;

    withdrawDai(amount: BigNumberish): Promise<BigNumber>;

    withdrawEth(amount: BigNumberish): Promise<BigNumber>;
  };
}
